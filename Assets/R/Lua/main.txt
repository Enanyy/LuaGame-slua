require "UnityClass"
require "WindowManager"
local pb = require "protobuf"
function main()
	
	TestPBC()

	TestOverWrite()
	
	WindowManager:Initialize()
	WindowManager:Open(UI_Main)
end

function TestPBC()
--[[
	
message Header 
{
  required int64 cmd = 1;
  required int32 seq = 2;
}
--]]
	local addr = io.open("E:/workspace/LuaGame-slua/Assets/R/Lua/Framework/pb/common.pb","rb")
	local buffer = addr:read "*a"
	addr:close()
 
	pb.register(buffer)

	local pb_data = pb.encode("Header",{cmd = 100,seq= 223})

	local data = pb.decode("Header",pb_data)

	print("cmd="..data.cmd .."seq=".. data.seq)
end



--[[
use protoc-gen-lua
function TestProtobuf()

	local person_pb =  require 'Protol.person_pb'
  
    local msg = person_pb.Person()
    msg.id = 10
	msg.age = 30
	msg.name = "aaaaa"
	msg.email = "bbbbbb"

	msg.header.cmd = 11
	msg.header.seq = 1000

	msg.array:append(1)                              
	msg.array:append(2)   

	local pb_data = msg:SerializeToString()   

	local ba = Slua.ByteArray()
	local length = string.len(pb_data)
	print(length)

	for i = 1, length do
		local b = string.byte(pb_data,i)
		ba:WriteByte(b)
	end
	
	LuaHelper.ProtobufString(ba)

	
end

function TestParseProtobuf(buffer)

    local pb_data = Slua.ToString(buffer:GetData())

	local person_pb = require "Protol.person_pb" 
	local msg = person_pb.Person()
	msg:ParseFromString(pb_data)
	--tostring 不会打印默认值
	print('person_pb decoder: '..tostring(msg)..'age: '..msg.age..'\nemail: '..msg.email)

end
--]]

--测试继承和重写
A = Class("A")
function A:print()
	print("A:print")
end
function A:init(a)
	print("Class A a =" ..a)
end

B = Class("B",A)

function B:ctor()
	
end

function B:init(b)

	self.base:init(b)
	print("Class B b =" ..b)

end

C = Class("C",B)
function C:ctor()

end

function C:init(c)

	self.base:init(c)
	print("Class C c =" ..c)

end

function TestOverWrite()

	local a = A.new()
	a:print()

	--没有重写 调用A的print
	local b = B.new()
	b:init(111)

	local c = C.new()
	c:init(222)

end
--[[
本文件由UIEditor工具自动生成，DO NOT EDIT!!!	
--]]
function UI_TestBase(self)
	self.mSprite = self.transform:Find():GetComponent()
end